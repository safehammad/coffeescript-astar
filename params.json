{"name":"Coffeescript-astar","tagline":"CoffeeScript A* Implementation","body":"# CoffeeScript A* Maze Solver\r\n\r\nAn implementation of the A* algorithm in CoffeeScript implemented as a maze solver.  Although this particular implementation is specific to solving basic mazes, the A* implementation should be easy to generalise.\r\n\r\nA sample implementation is provided in `index.html` which visualises the maze using SVG via the [Raphael] JavaScript library (included). The location of the start point can be altered by clicking anywhere on the maze.\r\n\r\n```coffeescript\r\n# Load the astar script:\r\n{astar} = require('./astar')\r\n\r\n# Define a maze as a string where:\r\n#\r\n#  '@' = start point\r\n#  'F' = end point\r\n#  '*' = wall\r\nmaze ='''*********\r\n         *       *\r\n         *   *   *\r\n         * @ * F *\r\n         *********'''\r\n\r\n# Create the solver\r\nsolver = new astar.MazeSolver maze\r\n\r\n# Get the solved route!\r\nroute = solver.solve()\r\n\r\n# The route is a series of [row, column] pairs from start to finish\r\nconsole.log route\r\n\r\n# Output:\r\n# [ [ 3, 2 ],\r\n#   [ 3, 3 ],\r\n#   [ 2, 3 ],\r\n#   [ 1, 3 ],\r\n#   [ 1, 4 ],\r\n#   [ 1, 5 ],\r\n#   [ 2, 5 ],\r\n#   [ 2, 6 ],\r\n#   [ 3, 6 ] ]\r\n```\r\n[Raphael]: http://raphaeljs.com/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}